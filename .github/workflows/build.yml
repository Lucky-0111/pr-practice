name: Docker Build & Push 워크플로우

on:
  push:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    name: 🐳 Docker 이미지 빌드
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: JDK 17 설정
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Gradle 캐시 설정
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Gradle 실행 권한 부여
        run: chmod +x gradlew

      - name: 애플리케이션 빌드 중...
        run: ./gradlew build -x test

      - name: Container Registry 로그인
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker 메타데이터 추출
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Docker 이미지 빌드 & 푸시
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: 빌드 성공 알림
        if: success()
        run: |
          WEBHOOK_URL="${{ secrets.N8N_WEBHOOK_URL_BUILD }}"
          
          curl -X POST "$WEBHOOK_URL" \
            -H "Content-Type: application/json" \
            -d "{
              \"status\": \"success\",
              \"message\": \"✅ Docker 이미지 빌드 & 푸시 완료! 🐳\",
              \"branch\": \"${{ github.ref_name }}\",
              \"image_tag\": \"${{ steps.meta.outputs.tags }}\",
              \"commit_sha\": \"${{ github.sha }}\",
              \"repository\": \"${{ github.repository }}\",
              \"workflow_name\": \"Docker Build & Push 워크플로우\",
              \"workflow_url\": \"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\"
            }"

      - name: 빌드 실패 알림
        if: failure()
        run: |
          WEBHOOK_URL="${{ secrets.N8N_WEBHOOK_URL_BUILD }}"
          
          curl -X POST "$WEBHOOK_URL" \
            -H "Content-Type: application/json" \
            -d "{
              \"status\": \"failure\",
              \"message\": \"❌ Docker 이미지 빌드 실패! 😱\",
              \"branch\": \"${{ github.ref_name }}\",
              \"commit_sha\": \"${{ github.sha }}\",
              \"repository\": \"${{ github.repository }}\",
              \"workflow_name\": \"Docker Build & Push 워크플로우\",
              \"workflow_url\": \"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\"
            }"

  trigger-deploy:
    name: 배포 워크플로우 트리거
    needs: build
    if: success()
    runs-on: ubuntu-latest
    
    steps:
      - name: Deploy 워크플로우 실행
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'deploy.yml',
              ref: context.ref,
              inputs: {
                image_tag: '${{ needs.build.outputs.image-tag }}',
                branch: '${{ github.ref_name }}',
                commit_sha: '${{ github.sha }}'
              }
            });
