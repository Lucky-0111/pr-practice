# 워크플로우 이름: 1번째 단계 - 테스트 실행
name: 1. Run Tests

# 트리거 조건: main 브랜치에 push될 때만 실행됩니다.
# paths 조건은 src 디렉토리 내 파일이 변경되었을 때만 워크플로우가 실행됨을 의미합니다.
on:
  push:
    branches:
      - main  # main 브랜치에 대해서만 실행
    paths:
      - 'src/**'  # src 디렉토리 내 파일이 변경될 때만 실행

# 실행할 작업(job) 정의
jobs:
  # 테스트 작업 정의
  test:
    # 실행 환경: Ubuntu 최신 버전
    runs-on: ubuntu-latest
    
    # 작업 단계(steps) 정의
    steps:
      # 1. 코드 가져오기: GitHub 저장소에서 코드를 가져옵니다.
      - name: Checkout repository
        uses: actions/checkout@v4  # 공식 checkout 액션 v4 버전 사용

      # 2. JDK 설정: Java 17 설치 (Spring Boot 프로젝트용)
      - name: Set up JDK 17
        uses: actions/setup-java@v3  # 공식 Java 설정 액션 v3 버전 사용
        with:
          java-version: '17'  # Java 버전 지정
          distribution: 'temurin'  # JDK 배포판 지정 (Eclipse Temurin)

      # 3. Gradle 캐시 설정: 빌드 속도 향상을 위해 Gradle 의존성 캐싱
      - name: Cache Gradle packages
        uses: actions/cache@v3  # 공식 캐시 액션 v3 버전 사용
        with:
          path: |  # 캐시할 경로 (여러 줄로 표현)
            ~/.gradle/caches
            ~/.gradle/wrapper
          # 캐시 키 설정: OS와 Gradle 파일 해시값 조합으로 고유 키 생성
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          # 캐시 복원 키: 정확히 일치하는 캐시가 없을 때 사용
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 4. 테스트 실행: Gradle 테스트 명령 실행
      - name: Run tests
        run: chmod +x ./gradlew && ./gradlew test --scan  # gradlew에 실행 권한 부여 후 테스트 실행
        continue-on-error: true  # 테스트가 실패해도 다음 단계로 진행

      # 5. 테스트 결과 수집 및 GitHub Actions에 표시
      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()  # 테스트 결과에 상관없이 항상 실행
        with:
          files: |
            **/build/test-results/**/*.xml

      # 6. 테스트 결과 요약 계산
      - name: Calculate Test Summary
        id: test_summary
        if: always()
        run: |
          TOTAL_TESTS=$(find . -path "*/build/test-results/*/*.xml" -type f -exec grep -l "<testcase" {} \; | xargs grep -h "<testcase" | wc -l)
          FAILED_TESTS=$(find . -path "*/build/test-results/*/*.xml" -type f -exec grep -l "<failure" {} \; | xargs grep -h "<failure" | wc -l)
          SKIPPED_TESTS=$(find . -path "*/build/test-results/*/*.xml" -type f -exec grep -l "<skipped" {} \; | xargs grep -h "<skipped" | wc -l)
          SUCCESS_TESTS=$((TOTAL_TESTS - FAILED_TESTS - SKIPPED_TESTS))
          
          echo "total_tests=$TOTAL_TESTS" >> $GITHUB_OUTPUT
          echo "success_tests=$SUCCESS_TESTS" >> $GITHUB_OUTPUT
          echo "failed_tests=$FAILED_TESTS" >> $GITHUB_OUTPUT
          echo "skipped_tests=$SKIPPED_TESTS" >> $GITHUB_OUTPUT
          
          # 테스트 상태 결정
          if [ "$FAILED_TESTS" -gt 0 ]; then
            echo "Test completed with failures: $FAILED_TESTS failed, $SUCCESS_TESTS succeeded, $SKIPPED_TESTS skipped out of $TOTAL_TESTS total tests" > test_status.txt
            echo "status=failed" >> $GITHUB_OUTPUT
          else
            echo "Test completed successfully: $SUCCESS_TESTS succeeded, $SKIPPED_TESTS skipped out of $TOTAL_TESTS total tests" > test_status.txt
            echo "status=success" >> $GITHUB_OUTPUT
          fi
          
          cat test_status.txt

      # 7. 테스트 결과 보고서 생성
      - name: Generate Test Report
        if: always()
        run: |
          mkdir -p test-reports
          cat << EOF > test-reports/test-summary.md
          # 테스트 결과 요약
          
          ## 통계
          - 총 테스트 수: ${{ steps.test_summary.outputs.total_tests }}
          - 성공: ${{ steps.test_summary.outputs.success_tests }} ✅
          - 실패: ${{ steps.test_summary.outputs.failed_tests }} ❌
          - 스킵: ${{ steps.test_summary.outputs.skipped_tests }} ⏭️
          
          ## 상태
          - 테스트 결과: ${{ steps.test_summary.outputs.status == 'success' && '✅ 성공' || '❌ 실패' }}
          
          *이 보고서는 자동으로 생성되었습니다.*
          EOF
      
      # 8. 테스트 보고서 아티팩트로 업로드
      - name: Upload Test Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: |
            test-reports/
            **/build/reports/tests/
          retention-days: 7  # 보고서를 7일간 보관

      # 9. 테스트 결과 아티팩트 업로드: 다른 워크플로우에서 사용할 수 있도록 결과 저장
      - name: Upload Test Status
        if: always()  # 항상 테스트 상태 업로드 
        uses: actions/upload-artifact@v4  # 공식 아티팩트 업로드 액션 v4 버전 사용
        with:
          name: test-status  # 아티팩트 이름
          path: test_status.txt  # 업로드할 파일 경로
          retention-days: 1  # 아티팩트 보관 기간(일)
